// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank {
    address[] public admins;
    
    struct Customer {
        bool exists;
        uint balance;
        uint loanAmount;
        uint lastPaymentTimestamp;
    }
    
    mapping(address => Customer) public customers;
    
    event NewCustomerRegistered(address indexed customer);
    event Deposit(address indexed customer, uint amount);
    event Withdrawal(address indexed customer, uint amount);
    event LoanRequested(address indexed customer, uint amount);
    event LoanRepaid(address indexed customer, uint amount, uint penaltyAmount);
    
    constructor() {
        admins.push(msg.sender); // Deployer is the initial admin
    }
    
    modifier onlyAdmin() {
        bool isAdmin = false;
        for (uint i = 0; i < admins.length; i++) {
            if (admins[i] == msg.sender) {
                isAdmin = true;
                break;
            }
        }
        require(isAdmin, "Only admin can perform this action");
        _;
    }
    
    modifier onlyExistingCustomer() {
        require(customers[msg.sender].exists, "Customer does not exist");
        _;
    }
    
    function addAdmin(address newAdmin) public onlyAdmin {
        admins.push(newAdmin);
    }
    
    function registerCustomer(address customer) public {
        require(!customers[customer].exists, "Customer already registered");
        customers[customer].exists = true;
        emit NewCustomerRegistered(customer);
    }
    
    function deposit() public payable onlyExistingCustomer {
        customers[msg.sender].balance += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    function withdraw(uint amount) public onlyExistingCustomer {
    require(customers[msg.sender].balance >= amount, "Insufficient balance");
    customers[msg.sender].balance -= amount;
    payable(msg.sender).transfer(amount);
    emit Withdrawal(msg.sender, amount);
}
    
    function requestLoan(uint amount) public onlyExistingCustomer {
        require(amount > 0, "Loan amount must be greater than 0");
        require(customers[msg.sender].loanAmount == 0, "You already have an active loan");  
        customers[msg.sender].loanAmount = amount;
        customers[msg.sender].lastPaymentTimestamp = block.timestamp;
        emit LoanRequested(msg.sender, amount);
    }
    
    function repayLoan(uint amount) public payable onlyExistingCustomer {
    require(customers[msg.sender].loanAmount > 0, "No active loan");
    require(amount > 0 && amount <= customers[msg.sender].balance, "Invalid repayment amount");

    uint penaltyAmount = calculatePenalty(msg.sender);
    uint totalRepaymentAmount = amount + penaltyAmount;

    require(msg.value >= totalRepaymentAmount, "Insufficient ETH sent for repayment");

    customers[msg.sender].loanAmount -= amount;
    customers[msg.sender].balance -= totalRepaymentAmount;

    if (customers[msg.sender].loanAmount == 0) {
        customers[msg.sender].lastPaymentTimestamp = 0; // Reset last payment timestamp
    }

    // Refund excess ETH sent by customer
    uint refundAmount = msg.value - totalRepaymentAmount;
    if (refundAmount > 0) {
        payable(msg.sender).transfer(refundAmount);
    }

    emit LoanRepaid(msg.sender, amount, penaltyAmount);
    }
    
    function calculatePenalty(address customer) private view returns (uint) {
        if (customers[customer].loanAmount == 0) {
            return 0; // No penalty if no active loan
        }
        
        uint lastPayment = customers[customer].lastPaymentTimestamp;
        uint timeSinceLastPayment = block.timestamp - lastPayment;
        
        // Penalty calculation (for simplicity, penalty is 1% per day of delay)
        uint penaltyAmount = (customers[customer].loanAmount * timeSinceLastPayment) / (100 * 1 days);
        
        return penaltyAmount;
    }
    
    function getBalance() public view onlyExistingCustomer returns (uint) {
        return customers[msg.sender].balance;
    }
    
    function getLoanAmount() public view onlyExistingCustomer returns (uint) {
        return customers[msg.sender].loanAmount;
    }
}
